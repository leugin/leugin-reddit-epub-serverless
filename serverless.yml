# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: leugin
# "app" enables Serverless Framework Dashboard features and sharing them with other Services.
app: reddit-epub-serverless
# "service" is the name of this project. This will also be added to your AWS resource names.
service: reddit-epub-serverless

provider:
  name: aws
  runtime: nodejs20.x
  timeout: 30
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - 's3:PutObject'
          Resource: arn:aws:s3:::${env:BUCKET_NAME}/*

plugins:
  - serverless-offline
  - serverless-s3-local
package:
  individually: true
functions:
  find:
    handler: routes/find.handler
    timeout: 120
    package:
      patterns:
        - "./routes/*"
        - "./tools/*"
        - "./services/*"
    environment:
      REDDIT_CLIENT_ID: ${env:REDDIT_CLIENT_ID}
      REDDIT_CLIENT_SECRET: ${env:REDDIT_CLIENT_SECRET}
      REDDIT_USERNAME: ${env:REDDIT_USERNAME}
      REDDIT_PASSWORD: ${env:REDDIT_PASSWORD}
      BUCKET_NAME: ${env:BUCKET_NAME}
      MAX_REQUEST: ${env:MAX_REQUEST, 10}
    events:
      - http:
          path: /api/v1/reddit/find
          method: get
          cors: true

  store:
    handler: routes/store.handler
    timeout: 120
    package:
      patterns:
        - "./routes/*"
        - "./tools/*"
        - "./services/*"
    environment:
      REDDIT_CLIENT_ID: ${env:REDDIT_CLIENT_ID}
      REDDIT_CLIENT_SECRET: ${env:REDDIT_CLIENT_SECRET}
      REDDIT_USERNAME: ${env:REDDIT_USERNAME}
      REDDIT_PASSWORD: ${env:REDDIT_PASSWORD}
      BUCKET_NAME: ${env:BUCKET_NAME}
    events:
      - http:
          path: /api/v1/reddit/{uid}
          method: post
          cors: true
  show:
    handler: routes/show.handler
    timeout: 120
    package:
      patterns:
        - "./routes/*"
        - "./tools/*"
        - "./services/*"
    environment:
      BUCKET_NAME: ${env:BUCKET_NAME}
    events:
      - http:
          path: /api/v1/reddit/{uid}
          method: get
          cors: true

custom:
  s3:
    host: localhost
resources:
  Resources:
    s3Database:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${env:BUCKET_NAME}
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
          BlockPublicPolicy: false
          IgnorePublicAcls: false
          RestrictPublicBuckets: false
    SampleBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref s3Database
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Action:
                - 's3:GetObject'
              Effect: Allow
              Resource: !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref s3Database
                  - /public/*
              Principal: '*'

